digraph {
  graph [ranksep=0.3]
  node [shape=box,width=7,fontname=Monospace]
  init [label="Initial"];
  subgraph {
    "#Ref<0.2886949581.1013972993.124381>" [label="        1: P: undefined = erlang:whereis('Elixir.Stacky')\l"];
    "init" -> "#Ref<0.2886949581.1013972993.124381>"[weight=1000];
    "#Ref<0.2886949581.1013972993.124395>" [label="        2: P: [] = erlang:process_info(P, registered_name)\l"];
    "#Ref<0.2886949581.1013972993.124381>" -> "#Ref<0.2886949581.1013972993.124395>"[weight=1000];
    "#Ref<0.2886949581.1013972993.124410>" [label="        3: P: P.1 = erlang:spawn_opt({...})\l"];
    "#Ref<0.2886949581.1013972993.124395>" -> "#Ref<0.2886949581.1013972993.124410>"[weight=1000];
    "#Ref<0.2886949581.1013972993.124432>" [label="        4: P.1: undefined = erlang:put('$ancestors', [...])\l"];
    "#Ref<0.2886949581.1013972993.124410>" -> "#Ref<0.2886949581.1013972993.124432>"[weight=1000];
    "#Ref<0.2886949581.1013972993.124436>" [label="        5: P.1: undefined = erlang:put('$initial_call', {...})\l"];
    "#Ref<0.2886949581.1013972993.124432>" -> "#Ref<0.2886949581.1013972993.124436>"[weight=1000];
    "#Ref<0.2886949581.1013972993.124439>" [label="        6: P.1: true = erlang:register('Elixir.Stacky', P.1)\l"];
    "#Ref<0.2886949581.1013972993.124436>" -> "#Ref<0.2886949581.1013972993.124439>"[weight=1000];
    "#Ref<0.2886949581.1013972993.124443>" [label="        7: P.1: {...} = P ! {...}\l"];
    "#Ref<0.2886949581.1013972993.124439>" -> "#Ref<0.2886949581.1013972993.124443>"[weight=1000];
    "#Ref<0.2886949581.1013972993.124446>" [label="        8: P: receives message ({...})\l"];
    "#Ref<0.2886949581.1013972993.124443>" -> "#Ref<0.2886949581.1013972993.124446>"[weight=1000];
    "#Ref<0.2886949581.1013972993.124450>" [label="        9: P: P.1 = erlang:whereis('Elixir.Stacky')\l"];
    "#Ref<0.2886949581.1013972993.124446>" -> "#Ref<0.2886949581.1013972993.124450>"[weight=1000];
    "#Ref<0.2886949581.1013972993.124478>" [label="       10: P: #Ref<0.2886949581.1013972993.124482> = erlang:monitor(process, P.1)\l"];
    "#Ref<0.2886949581.1013972993.124450>" -> "#Ref<0.2886949581.1013972993.124478>"[weight=1000];
    "#Ref<0.2886949581.1013972993.124483>" [label="       11: P: {...} = erlang:send(P.1, {...}, [...])\l"];
    "#Ref<0.2886949581.1013972993.124478>" -> "#Ref<0.2886949581.1013972993.124483>"[weight=1000];
    "#Ref<0.2886949581.1013972993.124486>" [label="       12: P.1: receives message ({...})\l"];
    "#Ref<0.2886949581.1013972993.124483>" -> "#Ref<0.2886949581.1013972993.124486>"[weight=1000];
    "#Ref<0.2886949581.1013972993.124489>" [label="       13: P.1: {...} = P ! {...}\l"];
    "#Ref<0.2886949581.1013972993.124486>" -> "#Ref<0.2886949581.1013972993.124489>"[weight=1000];
    "#Ref<0.2886949581.1013972993.124492>" [label="       14: P: receives message ({...})\l"];
    "#Ref<0.2886949581.1013972993.124489>" -> "#Ref<0.2886949581.1013972993.124492>"[weight=1000];
    "#Ref<0.2886949581.1013972993.124495>" [label="       15: P: true = erlang:demonitor(#Ref<0.2886949581.1013972993.124482>, [...])\l"];
    "#Ref<0.2886949581.1013972993.124492>" -> "#Ref<0.2886949581.1013972993.124495>"[weight=1000];
    "#Ref<0.2886949581.1013972993.124499>" [label="       16: P: P.1 = erlang:whereis('Elixir.Stacky')\l"];
    "#Ref<0.2886949581.1013972993.124495>" -> "#Ref<0.2886949581.1013972993.124499>"[weight=1000];
    "#Ref<0.2886949581.1013972993.124503>" [label="       17: P: #Ref<0.2886949581.1013972993.124506> = erlang:monitor(process, P.1)\l"];
    "#Ref<0.2886949581.1013972993.124499>" -> "#Ref<0.2886949581.1013972993.124503>"[weight=1000];
    "#Ref<0.2886949581.1013972993.124507>" [label="       18: P: {...} = erlang:send(P.1, {...}, [...])\l"];
    "#Ref<0.2886949581.1013972993.124503>" -> "#Ref<0.2886949581.1013972993.124507>"[weight=1000];
    "#Ref<0.2886949581.1013972993.124510>" [label="       19: P.1: receives message ({...})\l"];
    "#Ref<0.2886949581.1013972993.124507>" -> "#Ref<0.2886949581.1013972993.124510>"[weight=1000];
    "#Ref<0.2886949581.1013972993.124513>" [label="       20: P.1: exits normally\l",color=limegreen,penwidth=5];
    "#Ref<0.2886949581.1013972993.124510>" -> "#Ref<0.2886949581.1013972993.124513>"[weight=1000];
    "#Ref<0.2886949581.1013972993.124517>" [label="       21: P.1: true = erlang:exit(P, normal)\l"];
    "#Ref<0.2886949581.1013972993.124513>" -> "#Ref<0.2886949581.1013972993.124517>"[weight=1000];
    "#Ref<0.2886949581.1013972993.124520>" [label="       22: P.1: {...} = erlang:send(P, {...})\l"];
    "#Ref<0.2886949581.1013972993.124517>" -> "#Ref<0.2886949581.1013972993.124520>"[weight=1000];
    "#Ref<0.2886949581.1013972993.124523>" [label="       23: P: receives message ({...})\l"];
    "#Ref<0.2886949581.1013972993.124520>" -> "#Ref<0.2886949581.1013972993.124523>"[weight=1000];
    "#Ref<0.2886949581.1013972993.124526>" [label="       24: P: exits abnormally ({...})\l",color=red,penwidth=5];
    "#Ref<0.2886949581.1013972993.124523>" -> "#Ref<0.2886949581.1013972993.124526>"[weight=1000];
    "#Ref<0.2886949581.1013972993.124530>" [label="       25: P: true = erlang:exit(P.1, {...})\l"];
    "#Ref<0.2886949581.1013972993.124526>" -> "#Ref<0.2886949581.1013972993.124530>"[weight=1000];
    "#Ref<0.2886949581.1013972993.124567>" [label="1: Ok",style=filled,fillcolor=limegreen];
    "#Ref<0.2886949581.1013972993.124530>" -> "#Ref<0.2886949581.1013972993.124567>"[weight=1000];
  }
}
